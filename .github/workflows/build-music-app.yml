name: Symphonia Release

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'         
  workflow_dispatch:   # optional: run manually too

jobs:
  release:
    runs-on: windows-latest
    env:
      Solution_Name: Symphonia.sln
      Project_Path: Symphonia.csproj
      Configuration: Release

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      # Ensure restore generates RID-specific assets even if csproj lacks <RuntimeIdentifiers>
      - name: Restore (win-x64)
        run: dotnet restore $env:Solution_Name --runtime win-x64

      # Build
      - name: Build
        run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration

      # Publish single-file, self-contained EXE
      - name: Publish single-file EXE
        run: >
          msbuild $env:Project_Path /t:Publish
          /p:Configuration=$env:Configuration
          /p:RuntimeIdentifier=win-x64
          /p:SelfContained=true
          /p:PublishSingleFile=true
          /p:IncludeAllContentForSelfExtract=true
          /p:EnableCompressionInSingleFile=true
          /p:PublishDir=publish\Release

      # Find the produced .exe
      - name: Locate exe
        id: find_exe
        shell: pwsh
        run: |
          $exe = Get-ChildItem -Path publish\Release -Filter *.exe -Recurse | Select-Object -First 1
          if (-not $exe) { throw "No EXE found in publish\Release" }
          echo "EXE_PATH=$($exe.FullName)" >> $env:GITHUB_ENV
          echo "EXE_NAME=$($exe.Name)" >> $env:GITHUB_ENV

      # Get Git ver tag Message
      - name: Get tag or commit message
        shell: bash
        run: |
          git fetch --tags --force
          TAG_MSG="$(git for-each-ref refs/tags/${{ github.ref_name }} --format="%(contents)")"
          if [ -z "$TAG_MSG" ]; then
            TAG_MSG="$(git log -1 --pretty=%B)"
          fi
          {
            echo "TAG_MSG<<EOF"
            echo "$TAG_MSG"
            echo "EOF"
          } >> $GITHUB_ENV

      # Upload artifacts
      - name: Upload Artifact (optional)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.EXE_NAME }}
          path: ${{ env.EXE_PATH }}
